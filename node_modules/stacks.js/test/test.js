import { Block, Text, Image, Stack, StacksRenderer, Bind, TextField, Button, NumberField, ColorPicker, DatePicker, FileUpload } from "../dist/stacks.js"
// import "../dist/stacks.js"
// class View extends Block {
//     constructor() {
//         super();
//         this.states.hello = "hello";
//     }

//     body = () => {
//         return new Text(this.states.hello)
//         .onclick(() =>{ 
//             this.states.hello = "there";
//         })
//     }
// }

class View extends Block {
    constructor() {
        super();
        this.states.count = 0;
    }

    body = () => {
        return new Text(this.states.count == 0 ? "Click me!" : `I've been clicked ${this.states.count} time${this.states.count == 1 ? "" : "s"}!`)
            .onclick(() => {
                this.states.count++;
            });
    }
}

class Main extends Block {
    body = () => {
        return new Stack("y", 
            new View(),
            new View(),
            new View(),
            new View()
        )
    }
}

class Timer extends Block {
    interval;

    constructor() {
        super();
        this.states.time = 0;
        this.states.started = false;
    }

    body = () => {
        return new Stack("y", 
            new Text(this.states.started ? `${this.states.time.toFixed(1)}` : ""),
            new Text(this.states.started ? "Stop!" : "Start!")
                .onclick(() => {
                    this.states.started = !this.states.started;

                    let interval = setInterval(() => {
                        if(this.states.started)
                            this.states.time += 0.1;
                        else
                            clearInterval(interval);
                    }, 100);
                })
        );
    }
}

class CheckBox extends Block {
    constructor() {
        super();
        this.states.checked = false;
    }

    body = () => {
        return new Image(`./${this.states.checked ? "" : "un"}check.png`)
            .setStyleAttribute("width", "30px")
            .onClick(() => {
                this.states.checked = !this.states.checked;
            });
    }
}

class TodoItem extends Block {
    constructor(title) {
        super();
        this.title = title;
    }

    body = () => {
        return new Stack("x",
            new CheckBox(),
            new Text(this.title)
        ).align("left")
    }
}

class TodoList extends Block {
    body = () => {
        return new Stack("y", 
            new TodoItem("Take out the trash"),
            new TodoItem("Clean the car"),
            new TodoItem("Mow the lawn"),
            new TodoItem("Get the groceries")
        ).align("left").center()
    }
}

class TextTest extends Block {
    body = () => {
        return new Stack("y", 
            new Text("Hello"), 
            new Stack("x", 
                new Text("Hello"), 
                new Text("Hello")), 
            new Text("Hello"),
            new Text("Hello"),
            new Image("https://www.google.com/favicon.ico"));
    }
}

// class InputTest extends Block {
//     body = () => {
//         return new TextField("text").onChange((value) => {
//             console.log(value)
//         }).onInput((value) => {
//             console.log(value)
//         })
//     }
// }

class InputTest extends Block {
    constructor() {
        super();
        this.states.value = "";
    }

    body = () => {
        return new Stack("x", 
            new TextField({states: this.states, val:"value"}),
            new Text(this.states.value)
        )
    }
}

class InputValidation extends Block {
    constructor() {
        super();
        this.states.issueTextEmail = " ";
        this.states.issueTextPass = " ";

        this.states.readyEmail = false;
        this.states.readyPass = false;

        this.states.ready = false;
    }

    body = () => {
        return new Stack("y",
            new Text("Enter an email:"),
            new Stack("y",
                new TextField()
                    .textFieldType("email")
                    .onInput((value) => {
                        if(!this.validateEmail(value)) {
                            this.states.issueTextEmail = "Please enter a valid email";
                            this.states.readyEmail = false;
                        } else {
                            this.states.issueTextEmail = " ";
                            this.states.readyEmail = true;
                        }
                        this.checkReady();
                    }),
                new Text(this.states.issueTextEmail)
            ),
            new Text("Enter a password:"),
            new Stack("y",
                new TextField()
                    .textFieldType("password")
                    .onInput((value) => {
                        if(value.length < 5){
                            this.states.issueTextPass = "Min 5 characters";
                            this.states.readyPass = false;
                        } else {
                            this.states.issueTextPass = " ";
                            this.states.readyPass = true;
                        }
                        this.checkReady();
                        // console.log(this.states.ready);
                    }),
                new Text(this.states.issueTextPass)
            ),

            new Button(() => {
                alert("Signed in!");
            }, new Text("Sign in")).enabled(this.states.ready)
        ).align("center").center()
    }

    validateEmail(email) {
        const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
        return re.test(String(email).toLowerCase());
    }

    checkReady() {
        this.states.ready = this.states.readyEmail && this.states.readyPass;
    }
}


class TestEnabled extends Block {
    constructor() {
        super();
        this.states.enabled = true;
    }
    
    body = () => {
        return new Stack("y",
            new Button(() => {
                
            }, new Text("Hello".bind(this))),
            new Text("Disable")
                .onClick(() => {
                    this.states.enabled = !this.states.enabled;
                })
        ).center()
    }
}

// class TestBind extends Block {
//     constructor() {
//         super();
//         this.states.text = "";
//     }

//     body = () => {
//         return new Stack("y",
//             new TextField("text".bind(this)),
//             new Text(this.states.text)
//         );
//     }
// }

class BoundText extends Block {
    constructor(count) {
        super();
        this.states.count = 0;
        Bind(count, this);
    }

    body = () => {
        return new Text("increase")
                .onClick(() => {
                    this.states.count += 1;
                });
    }
}

class BoundObject extends Block {
    constructor() {
        super();
        this.states.count = 0;
    }

    body = () => {
        return new Stack("y", 
            new Text(this.states.count),
            new BoundText("count".bind(this))
        ).align("center").center()
    }
}

class BoundTextFieldTest extends Block {
    constructor() {
        super();
        this.states.text = "";
    }

    body = () => {
        return new Stack("y",
            new TextField("text".bind(this)),
            new Text(this.states.text)
        )
    }
}

class NumberFieldTest extends Block {
    constructor() {
        super();
        this.states.number = 0;
    }

    body = () => {
        return new Stack("y",
            new NumberField("number".bind(this)),
            new Text(this.states.number.toString())
        );
    }
}

class ColorPickerText extends Block {
    constructor() {
        super();
        this.states.color = "";
    }

    body = () => {
        return new Stack("y",
            new ColorPicker("color".bind(this)),
            new Text(this.states.color)
        );
    }
}

class DatePickerTest extends Block {
    constructor() {
        super();
        this.states.date = new Date();
    }

    body = () => {
        return new Stack("y",
            new DatePicker("date".bind(this))
                .onInput((date) => {
                    console.log(date);
                })
        )
    }
}

class FilePickerTest extends Block {
    constructor() {
        super();
        this.states.file = "";
    }

    body = () => {
        return new Stack("y",
            new FileUpload("file".bind(this))
                .onInput((file) => {
                    console.log(file)
                }),
            new Text(this.states.file)
        );
    }
}

class LoginForm extends Block {
    constructor() {
        super();
        this.states.user = "";
        this.states.password = "";
    }
    
    body = () => {
        return new Stack("y",
            new TextField("user".bind(this), "email")
                .label("Enter your username"),
            new TextField("password".bind(this), "password")
                .label("Enter your password"),
            new Button(() => {
                alert(`Signed in as ${this.states.user} with password ${this.states.password}`);
            }, 
                new Text("Sign in")
            )
        );
    }
}

StacksRenderer.getInstance().render(new LoginForm());