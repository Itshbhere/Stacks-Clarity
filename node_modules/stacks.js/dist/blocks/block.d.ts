/**
 * Block base class. All other blocks will be subclasses of this type.
 * Creating a block is easy:
 *
 * ```javascript
 * // create a class extending Block
 * class MyBlock extends Block {
 *  // override the body attribute by specifying a body function
 *  body = () => {
 *      return new Text("Hello!")
 *  }
 * }
 * ```
 */
export default class Block {
    /**
     * The body function is what defines the contents of a block.
     * This will be of type Block. Only other blocks can go into this. See the Getting Started Guide for information on creating blocks.
     */
    body: Function;
    /**
     * Not needed for Stacks users, but this is a key component to making the system blocks.
     */
    object: HTMLElement;
    /**
     * Determines whether or not the current block is acting as a hyperlink. [[link]]
     */
    isLink: boolean;
    /**
     * A list of the attributes attached to the current block, bound from other blocks. Not needed for Stacks users.
     */
    boundAttributes: any[];
    /**
     * The DOM id of the block when rendered
     */
    id: string;
    /**
     * The params object controls the attributes involved with a block. An overview of the types:
     *  - tag: defines the DOM tag of the element when rendered
     *  - isLink: determines whether or not the current block is acting as a hyperlink. [[link]]
     *  - style: style attributes for the outer HTMLElement when rendered
     *  - mainStyle: style attributes for the main HTMLElement when rendered
     *  - attributes: attributes that need to be rendered onto the element
     *  - childStyle: style attributes for the child HTML Element
     *  - events: attached event listeners and their functions
     *  - id: the DOM id of the block when rendered
     *  - stateful: determines whether or not the block needs its states to be tracked
     */
    params: {
        tag: string;
        isLink: boolean;
        text: boolean;
        input: boolean;
        stack: boolean;
        style: {};
        mainStyle: {};
        attributes: {};
        childStyle: {};
        events: {};
        id: string;
        stateful: boolean;
        wasView: boolean;
        selfAlign: string;
        centered: boolean;
    };
    /**
     * @internal Internal
     */
    updates: number;
    /**
     * @internal Internal states object. This checks for changes to the states object.
     */
    states: ProxyConstructor;
    centered: HTMLElement;
    /**
     * @internal Binds another block to this current block, given the key for state.
     */
    attachBoundAttribute(bound: any): void;
    /**
     * Makes a block a clickable hyperlink. For text, the link color will be visible. For any other non-text objects, it will appear as a regular link.
     * @param href The link that the block click should lead to.
     */
    link(href: string): this;
    /**
     * Applies a border to a block.
     * @param width The width of the border, in pixels.
     * @param color Optional: color string of border(ex: **red**) (default black)
     * @param radius Optional: the corner radius of the border, in pixels (default 0)
     * @param style Optional: the border style(ex: **dashed**) (defualt solid)
     */
    border(width: number, color?: string, radius?: number, style?: string): this;
    /**
     * Applies a padding around a block
     * @param size The size, in pixels of padding around the block
     */
    padding(size: number): this;
    /**
     * Manually sets a style attribute of the block, it is recommended to use this over [[setChildStyle]] unless you know what you're doing (or just want to experiment)
     * @param name The name of the CSS style
     * @param value The string value of the style
     */
    setStyleAttribute(name: string, value: string): this;
    /**
     * Manually sets the child rendered element style. Use [[setStyleAttribute]] if confused by what this is changing.
     * @param name The name of the CSS style
     * @param value The string value of the style
     */
    setChildStyle(name: string, value: string): this;
    /**
     * Sets the value of a certain HTML attribute.
     * @param name Name of attribute
     * @param value String value of attribute
     */
    setAttribute(name: string, value: string): this;
    /**
     * Adds an onclick event to the event queue and will run the passed calllback when object is clicked.
     * @param click Callback function to be run when object is clicked
     */
    onClick(click: Function): this;
    /**
     * @deprecated Function to set whether or not a block is stateful.
     *
     * This is no longer needed as stacks now automatically determines statefulness.
     * @param value
     */
    stateful(value?: boolean): this;
    /**
     * Center a block in it's parent container
     */
    center(): this;
    getParent(): HTMLElement;
    /**
     * @internal
     * @deprecated
     */
    init(): void;
    /**
     * @internal
     * Gets child HTML element from existing block.
     */
    getChild(): HTMLElement;
    /**
     * @internal
     * Used for renderer to get the HTML element contents of a specific block.
     * @param view
     */
    get(view?: boolean): HTMLElement;
}
